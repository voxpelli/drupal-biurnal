<?php
// $Id$

/**
 * @file
 * Main module file
 */

/*global $_biurnal_;
$_biurnal_ = new Biurnal();*/

/**
 * Implementation of hook_autoload_info().
 */
function biurnal_autoload_info() {
  return array(
    'Biurnal' => array(
      'file' => 'biurnal.classes.inc',
    ),
  );
}

/**
 * Implementation of hook_perm().
 */
function biurnal_perm() {
  return array(
    'configure biurnal scheme',
    'preview biurnal scheme',
    'administer biurnal scheme',
  );
}

/**
 * Implementation of hook_init().
 */
function biurnal_init() {
//  global $_biurnal_;
  //$_biurnal_->init();
  if (is_callable('actions_synchronize')) {
    actions_synchronize(FALSE, TRUE);
  }
}

/**
 * Implementation of hook_menu().
 */
function biurnal_menu() {
  global $_biurnal_;

  $items = array();

  $items['biurnal/preview/%nid'] = array(
    'title'            => 'Preview color scheme',
    'callback'         => 'biurnal_preview_scheme',
    'access arguments' => array('preview biurnal scheme'),
    'type'             => MENU_CALLBACK,
  );
  $items['biurnal/stop_preview'] = array(
    'title'            => 'Stop preview of color scheme',
    'callback'         => 'biurnal_preview_scheme',
    'access arguments' => array('preview biurnal scheme'),
    'type'             => MENU_CALLBACK,
  );
  $items['admin/build/biurnal'] = array(
    'title'            => 'Biurnal',
    'description'      => 'Setup and administer color schemes',
    'page callback'    => '_biurnal_admin_index',
    'access arguments' => array('configure biurnal scheme'),
    'file'             => 'biurnal.admin.inc',
  );
  $items['admin/build/biurnal/list'] = array(
    'title'            => 'List',
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'weight'           => -10,
  );
  $items['admin/build/biurnal/add'] = array(
    'title'            => 'Add configuration',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('biurnal_conf_form_add'),
    'access arguments' => array('configure content types'),
    'file'             => 'biurnal.admin.inc',
    'type'             => MENU_LOCAL_TASK,
  );
  $items['admin/build/biurnal/edit/%biurnal_conf'] = array(
    'title'            => 'Edit configuration',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('biurnal_conf_form_edit', 4),
    'access arguments' => array('configure content types'),
    'file'             => 'biurnal.admin.inc',
    'type'             => MENU_LOCAL_TASK,
  );
  $items['biurnal/flush'] = array(
    'title'            => 'Flush biurnal cache',
    'callback'         => '_biurnal_flush_cache',
    'access arguments' => array('administer biurnal scheme'),
    'type'             => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_ctools_plugin_layouts().
 */
function biurnal_ctools_plugin_scheme() {
  return array(
    'load themes' => TRUE, //Plugins can be loaded from themes
//    'cache'       => TRUE, //And we cache them so that a ctools_get_plugins() looking for all plugins doesn't have to load half a million files
  );
}

/**
 * Implementation of hook_action_info().
 */
function biurnal_action_info() {
  return array(
    'biurnal_set_color_scheme_action' => array(
      'description'  => t('Change the color scheme of the site'),
      'type'         => 'system',
      'configurable' => TRUE,
      'hooks'        => array()
    ),
  );
}

function biurnal_set_color_scheme_action($context) {
}

function biurnal_set_color_scheme_action_form($context) {
  $form = array();
  //TODO: Translate these two schemes?
  $options = array(
    'scheme_one' => 'Färgschema ett',
    'scheme_two' => 'Färgschema två',
  );
  $form['theme_selector'] = array(
    '#type'          => 'select',
    '#title'         => t('Color theme'),
    '#multiple'      => FALSE,
    '#default_value' => $context['theme_selector'],
    '#options'       => $options,
    '#required'      => TRUE,
    '#description'   => t('Choose a color theme')
  );
  return $form;
}

function biurnal_set_color_scheme_action_submit($form, $form_state) {
  $params = array(
    'theme_selector' => $form_state['values']['theme_selector'],
  );
  return $params;
}

function biurnal_preview_scheme($nid) {
  global $_biurnal_;
  if (isset($nid)) {
    $_biurnal_->preview_scheme($nid);
  }
  else {
    $_biurnal_->stop_preview();
  }
  drupal_goto('');
}

function biurnal_preprocess_page(&$vars) {
/*  global $_biurnal_;
  $_biurnal_->preprocess($vars);*/
}

function _biurnal_flush_cache() {
  $biurnal_path = file_directory_path() .'/biurnal';

  try {
    if (_biurnal_rm_recursive($biurnal_path)) {
      drupal_set_message(t('Biurnal cache cleared'), 'status');
    }
    else {
      drupal_set_message(t('Error while clearing biurnal cache: @error', array('@error' => t("Couldn't erase directory"))), 'status');
    }
  } catch (Exception $e) {
    drupal_set_message(t('Error while clearing biurnal cache: @error', array('@error' => $e->getMessage())), 'status');
  }

  drupal_goto($_GET['return_to']);
}

function _biurnal_rm_recursive($filepath) {
  if (is_dir($filepath) && !is_link($filepath)) {
    if ($dh = opendir($filepath)) {
      while (($sf = readdir($dh)) !== FALSE) {
        if ($sf == '.' || $sf == '..') {
          continue;
        }
        if (!_biurnal_rm_recursive($filepath . '/' . $sf)) {
          throw new Exception($filepath . '/' . $sf . ' could not be deleted.');
        }
      }
      closedir($dh);
    }
    return rmdir($filepath);
  }
  return unlink($filepath);
}

// ---------------------------------------------------------------------------
// Database functions.

/**
 * Create a new schme with defaults appropriately set from schema.
 */
function biurnal_conf_new() {
  ctools_include('export');
  return ctools_export_new_object('biurnal');
}

/**
 * Load a single scheme.
 */
function biurnal_conf_load($name) {
  print '<pre>';
  var_dump('HEJSAN!');
  print '</pre>'; die;
  ctools_include('export');
  $result = ctools_export_load_object('biurnal', 'names', array($name));
  if (isset($result[$name])) {
    return $result[$name];
  }
}

/**
 * Load all schemes.
 */
function biurnal_conf_load_all() {
  ctools_include('export');
  return ctools_export_load_object('biurnal');
}

/**
 * Write a scheme to the database.
 */
function biurnal_conf_save(&$conf) {
  $update = (isset($conf->name) && $conf->name != 'new') ? array('name') : array();
  drupal_write_record('biurnal', $conf, $update);
  return $scheme;
}

/**
 * Remove a mini panel.
 */
function biurnal_conf_delete($conf) {
  return db_query("DELETE FROM {biurnal} WHERE name = '%s", $conf->name);
}

/**
 * Fetch metadata on a specific scheme plugin.
 *
 * @param $scheme
 *   Name of a biurnal scheme.
 *
 * @return
 *   An array with information about the requested biurnal scheme.
 */
function biurnal_get_scheme($scheme) {
  ctools_include('plugins');
  return ctools_get_plugins('biurnal', 'scheme', $scheme);
}

/**
 * Fetch metadata for all scheme plugins.
 *
 * @return
 *   An array of arrays with information about all available biurnal schemes.
 */
function biurnal_get_schemes() {
  ctools_include('plugins');
  return ctools_get_plugins('biurnal', 'scheme');
}

//TODO: This is for views 1 most probably
function biurnal_views_default_views() {
  $view = new stdClass();
  $view->name = 'biurnal_active_scheme';
  $view->description = 'Determines which biurnal scheme is active';
  $view->access = array();
  $view->view_args_php = '';
  $view->page = FALSE;
  $view->page_title = '';
  $view->page_header = '';
  $view->page_header_format = '3';
  $view->page_footer = '';
  $view->page_footer_format = '3';
  $view->page_empty = '';
  $view->page_empty_format = '3';
  $view->page_type = 'node';
  $view->url = '';
  $view->use_pager = TRUE;
  $view->nodes_per_page = '10';
  $view->sort = array();
  $view->argument = array();
  $view->field = array(
    array('tablename' => 'node', 'field' => 'nid', 'label' => ''),
  );
  $view->filter = array(
    array(
      'tablename' => 'node', 'field' => 'type', 'operator' => 'OR',
      'options' => '', 'value' => array(0 => 'biurnal'),
    ),
    array(
      'tablename' => 'node', 'field' => 'status',
      'operator' => '=', 'options' => '', 'value' => '1',
    ),
  );
  $view->exposed_filter = array();
  $views[$view->name] = $view;

  return $views;
}